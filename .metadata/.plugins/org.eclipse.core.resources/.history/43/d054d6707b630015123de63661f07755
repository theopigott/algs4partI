# Overview
* Collection of objects
* Operations: insert, remove, iterate, test if empty

## Terminology
* __Client__: program using operations defined in interface
* __Implementation__: code implementing operations
* __Interface__: description of data type & operations

## Encapsulation
Separate interface and implementation

* __Design__: modular, reusable libraries
* __Performance__: optimized implementation

# Stack
__LIFO__ = "last in first out"

`public class Bag<Item> implements Iterable <Item>`

<table>
    <tr>
        <td></td>
        <td><code>Bag()</code></td>
        <td>create empty bag</td>
    </tr>
    <tr>
        <td><code>void</code></td>
        <td><code>add(Item item)</code></td>
        <td>add item</td>
    </tr>
    <tr>
        <td><code>boolean</code></td>
        <td><code>isEmpty()</code></td>
        <td>is bag empty?</td>
    </tr>
    <tr>
        <td><code>int</code></td>
        <td><code>size()</code></td>
        <td>number of items in bag</td>
    </tr>
</table>

## Linked-List implementation
* Define `Node` inner class with 2 attributes: `Item` and pointer to next `Node`
* Stack maintains pointer to first node in linked list and inserts & removes from front.

### Performance
* Every operation takes constant time in worst case.
* A stack with *N* items uses ~ 40 *N* bytes (excluding memory for Items, which client owns).

## Array implementation
* Use array `a[]` to store *N* items on stack.
* `push()` adds new item as `a[N]`
* `pop()` removes item from `s[N-1]`

### Resizing
* __Repeated doubling__: If array full, create new array of twice the size and copy items.
* If array 1/4 empty, create new array of half the size and copy items.

### Performance
* Cost of inserting first *N* items N + (2 + 4 + 6 + ... + N) ~ 3N since there is 1 array access per *push* and *k* array accesses to double to size *k*. Hence *amortised* (averaged) cost is 3.

* Thus amortised cost of push and pop operations is constant time.

* Memory usage: ~ 8 N when full, ~ 32 N when one-quarter full. 

# Queue
__FIFO__ = "first in first out"